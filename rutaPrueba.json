[object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object][object Object]function File(fileBits, fileName) {
  if (new.target === undefined) {
    throw new TypeError(
      "Failed to construct 'File'. Please use the 'new' operator; this constructor " + "cannot be called as a function."
    );
  }

  if (arguments.length < 2) {
    throw new TypeError("Failed to construct 'File': 2 arguments required, but only " + arguments.length + " present.");
  }
  const args = [];
  {
    let curArg = arguments[0];
    if (!utils.isObject(curArg)) {
      throw new TypeError("Failed to construct 'File': parameter 1" + " is not an iterable object.");
    } else {
      const V = [];
      const tmp = curArg;
      for (let nextItem of tmp) {
        if (isBlob(nextItem)) {
          nextItem = utils.implForWrapper(nextItem);
        } else if (nextItem instanceof ArrayBuffer) {
        } else if (ArrayBuffer.isView(nextItem)) {
        } else {
          nextItem = conversions["USVString"](nextItem, {
            context: "Failed to construct 'File': parameter 1" + "'s element"
          });
        }
        V.push(nextItem);
      }
      curArg = V;
    }
    args.push(curArg);
  }
  {
    let curArg = arguments[1];
    curArg = conversions["USVString"](curArg, { context: "Failed to construct 'File': parameter 2" });
    args.push(curArg);
  }
  {
    let curArg = arguments[2];
    curArg = convertFilePropertyBag(curArg, { context: "Failed to construct 'File': parameter 3" });
    args.push(curArg);
  }

  iface.setup(this, args);
}function File(fileBits, fileName) {
  if (new.target === undefined) {
    throw new TypeError(
      "Failed to construct 'File'. Please use the 'new' operator; this constructor " + "cannot be called as a function."
    );
  }

  if (arguments.length < 2) {
    throw new TypeError("Failed to construct 'File': 2 arguments required, but only " + arguments.length + " present.");
  }
  const args = [];
  {
    let curArg = arguments[0];
    if (!utils.isObject(curArg)) {
      throw new TypeError("Failed to construct 'File': parameter 1" + " is not an iterable object.");
    } else {
      const V = [];
      const tmp = curArg;
      for (let nextItem of tmp) {
        if (isBlob(nextItem)) {
          nextItem = utils.implForWrapper(nextItem);
        } else if (nextItem instanceof ArrayBuffer) {
        } else if (ArrayBuffer.isView(nextItem)) {
        } else {
          nextItem = conversions["USVString"](nextItem, {
            context: "Failed to construct 'File': parameter 1" + "'s element"
          });
        }
        V.push(nextItem);
      }
      curArg = V;
    }
    args.push(curArg);
  }
  {
    let curArg = arguments[1];
    curArg = conversions["USVString"](curArg, { context: "Failed to construct 'File': parameter 2" });
    args.push(curArg);
  }
  {
    let curArg = arguments[2];
    curArg = convertFilePropertyBag(curArg, { context: "Failed to construct 'File': parameter 3" });
    args.push(curArg);
  }

  iface.setup(this, args);
}function File(fileBits, fileName) {
  if (new.target === undefined) {
    throw new TypeError(
      "Failed to construct 'File'. Please use the 'new' operator; this constructor " + "cannot be called as a function."
    );
  }

  if (arguments.length < 2) {
    throw new TypeError("Failed to construct 'File': 2 arguments required, but only " + arguments.length + " present.");
  }
  const args = [];
  {
    let curArg = arguments[0];
    if (!utils.isObject(curArg)) {
      throw new TypeError("Failed to construct 'File': parameter 1" + " is not an iterable object.");
    } else {
      const V = [];
      const tmp = curArg;
      for (let nextItem of tmp) {
        if (isBlob(nextItem)) {
          nextItem = utils.implForWrapper(nextItem);
        } else if (nextItem instanceof ArrayBuffer) {
        } else if (ArrayBuffer.isView(nextItem)) {
        } else {
          nextItem = conversions["USVString"](nextItem, {
            context: "Failed to construct 'File': parameter 1" + "'s element"
          });
        }
        V.push(nextItem);
      }
      curArg = V;
    }
    args.push(curArg);
  }
  {
    let curArg = arguments[1];
    curArg = conversions["USVString"](curArg, { context: "Failed to construct 'File': parameter 2" });
    args.push(curArg);
  }
  {
    let curArg = arguments[2];
    curArg = convertFilePropertyBag(curArg, { context: "Failed to construct 'File': parameter 3" });
    args.push(curArg);
  }

  iface.setup(this, args);
}function File(fileBits, fileName) {
  if (new.target === undefined) {
    throw new TypeError(
      "Failed to construct 'File'. Please use the 'new' operator; this constructor " + "cannot be called as a function."
    );
  }

  if (arguments.length < 2) {
    throw new TypeError("Failed to construct 'File': 2 arguments required, but only " + arguments.length + " present.");
  }
  const args = [];
  {
    let curArg = arguments[0];
    if (!utils.isObject(curArg)) {
      throw new TypeError("Failed to construct 'File': parameter 1" + " is not an iterable object.");
    } else {
      const V = [];
      const tmp = curArg;
      for (let nextItem of tmp) {
        if (isBlob(nextItem)) {
          nextItem = utils.implForWrapper(nextItem);
        } else if (nextItem instanceof ArrayBuffer) {
        } else if (ArrayBuffer.isView(nextItem)) {
        } else {
          nextItem = conversions["USVString"](nextItem, {
            context: "Failed to construct 'File': parameter 1" + "'s element"
          });
        }
        V.push(nextItem);
      }
      curArg = V;
    }
    args.push(curArg);
  }
  {
    let curArg = arguments[1];
    curArg = conversions["USVString"](curArg, { context: "Failed to construct 'File': parameter 2" });
    args.push(curArg);
  }
  {
    let curArg = arguments[2];
    curArg = convertFilePropertyBag(curArg, { context: "Failed to construct 'File': parameter 3" });
    args.push(curArg);
  }

  iface.setup(this, args);
}function File(fileBits, fileName) {
  if (new.target === undefined) {
    throw new TypeError(
      "Failed to construct 'File'. Please use the 'new' operator; this constructor " + "cannot be called as a function."
    );
  }

  if (arguments.length < 2) {
    throw new TypeError("Failed to construct 'File': 2 arguments required, but only " + arguments.length + " present.");
  }
  const args = [];
  {
    let curArg = arguments[0];
    if (!utils.isObject(curArg)) {
      throw new TypeError("Failed to construct 'File': parameter 1" + " is not an iterable object.");
    } else {
      const V = [];
      const tmp = curArg;
      for (let nextItem of tmp) {
        if (isBlob(nextItem)) {
          nextItem = utils.implForWrapper(nextItem);
        } else if (nextItem instanceof ArrayBuffer) {
        } else if (ArrayBuffer.isView(nextItem)) {
        } else {
          nextItem = conversions["USVString"](nextItem, {
            context: "Failed to construct 'File': parameter 1" + "'s element"
          });
        }
        V.push(nextItem);
      }
      curArg = V;
    }
    args.push(curArg);
  }
  {
    let curArg = arguments[1];
    curArg = conversions["USVString"](curArg, { context: "Failed to construct 'File': parameter 2" });
    args.push(curArg);
  }
  {
    let curArg = arguments[2];
    curArg = convertFilePropertyBag(curArg, { context: "Failed to construct 'File': parameter 3" });
    args.push(curArg);
  }

  iface.setup(this, args);
}function File(fileBits, fileName) {
  if (new.target === undefined) {
    throw new TypeError(
      "Failed to construct 'File'. Please use the 'new' operator; this constructor " + "cannot be called as a function."
    );
  }

  if (arguments.length < 2) {
    throw new TypeError("Failed to construct 'File': 2 arguments required, but only " + arguments.length + " present.");
  }
  const args = [];
  {
    let curArg = arguments[0];
    if (!utils.isObject(curArg)) {
      throw new TypeError("Failed to construct 'File': parameter 1" + " is not an iterable object.");
    } else {
      const V = [];
      const tmp = curArg;
      for (let nextItem of tmp) {
        if (isBlob(nextItem)) {
          nextItem = utils.implForWrapper(nextItem);
        } else if (nextItem instanceof ArrayBuffer) {
        } else if (ArrayBuffer.isView(nextItem)) {
        } else {
          nextItem = conversions["USVString"](nextItem, {
            context: "Failed to construct 'File': parameter 1" + "'s element"
          });
        }
        V.push(nextItem);
      }
      curArg = V;
    }
    args.push(curArg);
  }
  {
    let curArg = arguments[1];
    curArg = conversions["USVString"](curArg, { context: "Failed to construct 'File': parameter 2" });
    args.push(curArg);
  }
  {
    let curArg = arguments[2];
    curArg = convertFilePropertyBag(curArg, { context: "Failed to construct 'File': parameter 3" });
    args.push(curArg);
  }

  iface.setup(this, args);
}